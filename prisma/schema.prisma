generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orders       Order[]
  shops        Shop[]
  transactions Transaction[]
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  description String
  status      ShopStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vendorId    String
  type        ShopType
  orders      Order[]
  products    Product[]
  vendor      User       @relation(fields: [vendorId], references: [id])
}

model ProductCatalog {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String?
  defaultPrice Decimal
  image        String
  category     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
}

model Product {
  id         String         @id @default(uuid())
  price      Decimal
  stock      Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  shopId     String
  catalogId  String
  orderItems OrderItem[]
  catalog    ProductCatalog @relation(fields: [catalogId], references: [id])
  shop       Shop           @relation(fields: [shopId], references: [id])
}

model Order {
  id          String       @id @default(uuid())
  customerId  String
  total       Decimal
  status      OrderStatus
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  shopId      String
  customer    User         @relation(fields: [customerId], references: [id])
  shop        Shop         @relation(fields: [shopId], references: [id])
  items       OrderItem[]
  transaction Transaction?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Transaction {
  id          String            @id @default(uuid())
  orderId     String            @unique
  customerId  String
  amount      Decimal
  status      TransactionStatus
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  method      PaymentMethod     @default(cod)
  phoneNumber String?
  customer    User              @relation(fields: [customerId], references: [id])
  order       Order             @relation(fields: [orderId], references: [id])
}

enum Role {
  customer
  vendor
  admin
}

enum ShopStatus {
  active
  inactive
}

enum OrderStatus {
  pending
  packed
  completed
  cancelled
}

enum TransactionStatus {
  pending
  successful
  failed
}

enum ShopType {
  local_shop
  grocery_shop
}

enum PaymentMethod {
  mpesa
  airtel
  cod
}
